// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 00002_pre_go_communication_conversation_99999.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"
)

const addUserToCommunicationConversation = `-- name: AddUserToCommunicationConversation :execresult
INSERT INTO pre_go_communication_conversation_users_99999 (
        conversation_id,
        user_id,
        nick_name
    )
VALUES (?, ?, ?)
`

type AddUserToCommunicationConversationParams struct {
	ConversationID int64
	UserID         int64
	NickName       sql.NullString
}

func (q *Queries) AddUserToCommunicationConversation(ctx context.Context, arg AddUserToCommunicationConversationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addUserToCommunicationConversation, arg.ConversationID, arg.UserID, arg.NickName)
}

const deleteCommunicationConversation = `-- name: DeleteCommunicationConversation :execresult
DELETE FROM pre_go_communication_conversation_99999
WHERE id = ?
`

func (q *Queries) DeleteCommunicationConversation(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteCommunicationConversation, id)
}

const getCommunicationConversationByIDIsDeleted = `-- name: GetCommunicationConversationByIDIsDeleted :one
SELECT c.id,
    c.title,
    JSON_ARRAYAGG(
        JSON_OBJECT(
            'user_id',
            u.user_id,
            'nick_name',
            u.nick_name,
            'is_deleted',
            u.is_deleted
        )
    ) AS user_ids,
    c.description,
    c.type,
    c.background,
    c.emoji,
    c.is_deleted,
    c.created_at,
    c.updated_at
FROM pre_go_communication_conversation_99999 AS c
    LEFT JOIN pre_go_communication_conversation_users_99999 AS u ON c.id = u.conversation_id
    AND u.is_deleted = false
WHERE c.id = ?
    AND c.is_deleted = true
GROUP BY c.id,
    c.title,
    c.description,
    c.type,
    c.background,
    c.emoji,
    c.is_deleted,
    c.created_at,
    c.updated_at
`

type GetCommunicationConversationByIDIsDeletedRow struct {
	ID          int64
	Title       sql.NullString
	UserIds     json.RawMessage
	Description sql.NullString
	Type        sql.NullString
	Background  sql.NullString
	Emoji       sql.NullString
	IsDeleted   sql.NullBool
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) GetCommunicationConversationByIDIsDeleted(ctx context.Context, id int64) (GetCommunicationConversationByIDIsDeletedRow, error) {
	row := q.db.QueryRowContext(ctx, getCommunicationConversationByIDIsDeleted, id)
	var i GetCommunicationConversationByIDIsDeletedRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserIds,
		&i.Description,
		&i.Type,
		&i.Background,
		&i.Emoji,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCommunicationConversationById = `-- name: GetCommunicationConversationById :one
SELECT c.id,
    c.title,
    JSON_ARRAYAGG(
        JSON_OBJECT(
            'user_id',
            u.user_id,
            'nick_name',
            u.nick_name,
            'is_deleted',
            u.is_deleted
        )
    ) AS user_ids,
    c.description,
    c.type,
    c.background,
    c.emoji,
    c.is_deleted,
    c.created_at,
    c.updated_at
FROM pre_go_communication_conversation_99999 AS c
    LEFT JOIN pre_go_communication_conversation_users_99999 AS u ON c.id = u.conversation_id
    AND u.is_deleted = false
WHERE c.id = ?
    AND c.is_deleted = false
GROUP BY c.id,
    c.title,
    c.description,
    c.type,
    c.background,
    c.emoji,
    c.is_deleted,
    c.created_at,
    c.updated_at
`

type GetCommunicationConversationByIdRow struct {
	ID          int64
	Title       sql.NullString
	UserIds     json.RawMessage
	Description sql.NullString
	Type        sql.NullString
	Background  sql.NullString
	Emoji       sql.NullString
	IsDeleted   sql.NullBool
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) GetCommunicationConversationById(ctx context.Context, id int64) (GetCommunicationConversationByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getCommunicationConversationById, id)
	var i GetCommunicationConversationByIdRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserIds,
		&i.Description,
		&i.Type,
		&i.Background,
		&i.Emoji,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getListCommunicationConversations = `-- name: GetListCommunicationConversations :many
SELECT c.id,
    c.title,
    JSON_ARRAYAGG(
        JSON_OBJECT(
            'user_id',
            u.user_id,
            'nick_name',
            u.nick_name,
            'is_deleted',
            u.is_deleted,
            'last_message',
            u.last_message,
            'updated_at',
            u.updated_at
        )
    ) AS user_ids,
    c.description,
    c.type,
    c.background,
    c.emoji,
    c.is_deleted,
    c.created_at,
    c.updated_at
FROM pre_go_communication_conversation_99999 AS c
    LEFT JOIN pre_go_communication_conversation_users_99999 AS u ON c.id = u.conversation_id
    AND u.is_deleted = false
WHERE c.id IN (
        SELECT conversation_id
        FROM pre_go_communication_conversation_users_99999 AS t
        WHERE t.user_id = ?
            AND t.is_deleted = false
    )
    AND c.is_deleted = false
GROUP BY c.id,
    c.title,
    c.description,
    c.type,
    c.background,
    c.emoji,
    c.is_deleted,
    c.created_at,
    c.updated_at
LIMIT ? OFFSET ?
`

type GetListCommunicationConversationsParams struct {
	UserID int64
	Limit  int32
	Offset int32
}

type GetListCommunicationConversationsRow struct {
	ID          int64
	Title       sql.NullString
	UserIds     json.RawMessage
	Description sql.NullString
	Type        sql.NullString
	Background  sql.NullString
	Emoji       sql.NullString
	IsDeleted   sql.NullBool
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) GetListCommunicationConversations(ctx context.Context, arg GetListCommunicationConversationsParams) ([]GetListCommunicationConversationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getListCommunicationConversations, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListCommunicationConversationsRow
	for rows.Next() {
		var i GetListCommunicationConversationsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.UserIds,
			&i.Description,
			&i.Type,
			&i.Background,
			&i.Emoji,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListCommunicationConversationsIsDeleted = `-- name: GetListCommunicationConversationsIsDeleted :many
SELECT c.id,
    c.title,
    JSON_ARRAYAGG(
        JSON_OBJECT(
            'user_id',
            u.user_id,
            'nick_name',
            u.nick_name,
            'is_deleted',
            u.is_deleted,
            'last_message',
            u.last_message,
            'updated_at',
            u.updated_at
        )
    ) AS user_ids,
    c.description,
    c.type,
    c.background,
    c.emoji,
    c.is_deleted,
    c.created_at,
    c.updated_at
FROM pre_go_communication_conversation_99999 AS c
    LEFT JOIN pre_go_communication_conversation_users_99999 AS u ON c.id = u.conversation_id
    AND u.is_deleted = false
WHERE c.id IN (
        select conversation_id
        from pre_go_communication_conversation_users_99999 AS t
        WHERE t.user_id = ?
            AND t.is_deleted = false
    )
    AND c.is_deleted = true
GROUP BY c.id,
    c.title,
    c.description,
    c.type,
    c.background,
    c.emoji,
    c.is_deleted,
    c.created_at,
    c.updated_at
LIMIT ? OFFSET ?
`

type GetListCommunicationConversationsIsDeletedParams struct {
	UserID int64
	Limit  int32
	Offset int32
}

type GetListCommunicationConversationsIsDeletedRow struct {
	ID          int64
	Title       sql.NullString
	UserIds     json.RawMessage
	Description sql.NullString
	Type        sql.NullString
	Background  sql.NullString
	Emoji       sql.NullString
	IsDeleted   sql.NullBool
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) GetListCommunicationConversationsIsDeleted(ctx context.Context, arg GetListCommunicationConversationsIsDeletedParams) ([]GetListCommunicationConversationsIsDeletedRow, error) {
	rows, err := q.db.QueryContext(ctx, getListCommunicationConversationsIsDeleted, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListCommunicationConversationsIsDeletedRow
	for rows.Next() {
		var i GetListCommunicationConversationsIsDeletedRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.UserIds,
			&i.Description,
			&i.Type,
			&i.Background,
			&i.Emoji,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCommunicationConversation = `-- name: InsertCommunicationConversation :execresult
INSERT INTO pre_go_communication_conversation_99999 (
        title,
        description,
        type,
        background,
        emoji,
        is_deleted,
        created_at,
        updated_at
    )
VALUES (
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        NOW(),
        NOW()
    )
`

type InsertCommunicationConversationParams struct {
	Title       sql.NullString
	Description sql.NullString
	Type        sql.NullString
	Background  sql.NullString
	Emoji       sql.NullString
	IsDeleted   sql.NullBool
}

func (q *Queries) InsertCommunicationConversation(ctx context.Context, arg InsertCommunicationConversationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertCommunicationConversation,
		arg.Title,
		arg.Description,
		arg.Type,
		arg.Background,
		arg.Emoji,
		arg.IsDeleted,
	)
}

const removeUserFromCommunicationConversation = `-- name: RemoveUserFromCommunicationConversation :execresult
UPDATE pre_go_communication_conversation_users_99999
SET is_deleted = true,
    updated_at = NOW()
WHERE conversation_id = ?
    AND user_id = ?
`

type RemoveUserFromCommunicationConversationParams struct {
	ConversationID int64
	UserID         int64
}

func (q *Queries) RemoveUserFromCommunicationConversation(ctx context.Context, arg RemoveUserFromCommunicationConversationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, removeUserFromCommunicationConversation, arg.ConversationID, arg.UserID)
}

const softDeleteCommunicationConversation = `-- name: SoftDeleteCommunicationConversation :execresult
UPDATE pre_go_communication_conversation_99999
SET is_deleted = true,
    updated_at = NOW()
WHERE id = ?
`

func (q *Queries) SoftDeleteCommunicationConversation(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, softDeleteCommunicationConversation, id)
}

const updateCommunicationConversation = `-- name: UpdateCommunicationConversation :execresult
UPDATE pre_go_communication_conversation_99999
SET title = ?,
    description = ?,
    type = ?,
    background = ?,
    emoji = ?,
    is_deleted = ?,
    updated_at = NOW()
WHERE id = ?
`

type UpdateCommunicationConversationParams struct {
	Title       sql.NullString
	Description sql.NullString
	Type        sql.NullString
	Background  sql.NullString
	Emoji       sql.NullString
	IsDeleted   sql.NullBool
	ID          int64
}

func (q *Queries) UpdateCommunicationConversation(ctx context.Context, arg UpdateCommunicationConversationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCommunicationConversation,
		arg.Title,
		arg.Description,
		arg.Type,
		arg.Background,
		arg.Emoji,
		arg.IsDeleted,
		arg.ID,
	)
}

const updateLastMessageInCommunicationConversation = `-- name: UpdateLastMessageInCommunicationConversation :execresult
UPDATE pre_go_communication_conversation_users_99999
SET last_message = ?,
    updated_at = NOW()
WHERE conversation_id = ?
    AND user_id = ?
`

type UpdateLastMessageInCommunicationConversationParams struct {
	LastMessage    sql.NullString
	ConversationID int64
	UserID         int64
}

func (q *Queries) UpdateLastMessageInCommunicationConversation(ctx context.Context, arg UpdateLastMessageInCommunicationConversationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateLastMessageInCommunicationConversation, arg.LastMessage, arg.ConversationID, arg.UserID)
}
