// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 00002_pre_go_communication_conversation_99999.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"
)

const addUserToCommunicationConversation = `-- name: AddUserToCommunicationConversation :execresult
UPDATE pre_go_communication_conversation_99999
SET user_ids = JSON_ARRAY_APPEND(user_ids, '$', ?)
WHERE id = ?
`

type AddUserToCommunicationConversationParams struct {
	JSONARRAYAPPEND interface{}
	ID              int64
}

func (q *Queries) AddUserToCommunicationConversation(ctx context.Context, arg AddUserToCommunicationConversationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addUserToCommunicationConversation, arg.JSONARRAYAPPEND, arg.ID)
}

const deleteCommunicationConversation = `-- name: DeleteCommunicationConversation :execresult
DELETE FROM pre_go_communication_conversation_99999
WHERE id = ?
`

func (q *Queries) DeleteCommunicationConversation(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteCommunicationConversation, id)
}

const getCommunicationConversationById = `-- name: GetCommunicationConversationById :one
SELECT id,
    title,
    user_ids,
    description,
    type,
    background,
    emoji,
    is_deleted,
    created_at,
    updated_at
FROM pre_go_communication_conversation_99999
WHERE id = ?
`

func (q *Queries) GetCommunicationConversationById(ctx context.Context, id int64) (PreGoCommunicationConversation99999, error) {
	row := q.db.QueryRowContext(ctx, getCommunicationConversationById, id)
	var i PreGoCommunicationConversation99999
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserIds,
		&i.Description,
		&i.Type,
		&i.Background,
		&i.Emoji,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCommunicationConversationsByUserId = `-- name: GetCommunicationConversationsByUserId :many
SELECT id,
    title,
    user_ids,
    description,
    type,
    background,
    emoji,
    is_deleted,
    created_at,
    updated_at
FROM pre_go_communication_conversation_99999
WHERE JSON_CONTAINS(user_ids, JSON_QUOTE(?), '$')
LIMIT ? OFFSET ?
`

type GetCommunicationConversationsByUserIdParams struct {
	JSONQUOTE string
	Limit     int32
	Offset    int32
}

func (q *Queries) GetCommunicationConversationsByUserId(ctx context.Context, arg GetCommunicationConversationsByUserIdParams) ([]PreGoCommunicationConversation99999, error) {
	rows, err := q.db.QueryContext(ctx, getCommunicationConversationsByUserId, arg.JSONQUOTE, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PreGoCommunicationConversation99999
	for rows.Next() {
		var i PreGoCommunicationConversation99999
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.UserIds,
			&i.Description,
			&i.Type,
			&i.Background,
			&i.Emoji,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCommunicationConversation = `-- name: InsertCommunicationConversation :execresult
INSERT INTO pre_go_communication_conversation_99999 (
        title,
        user_ids,
        description,
        type,
        background,
        emoji,
        is_deleted,
        created_at,
        updated_at
    )
VALUES (
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        NOW(),
        NOW()
    )
`

type InsertCommunicationConversationParams struct {
	Title       sql.NullString
	UserIds     json.RawMessage
	Description sql.NullString
	Type        sql.NullString
	Background  sql.NullString
	Emoji       sql.NullString
	IsDeleted   sql.NullBool
}

func (q *Queries) InsertCommunicationConversation(ctx context.Context, arg InsertCommunicationConversationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertCommunicationConversation,
		arg.Title,
		arg.UserIds,
		arg.Description,
		arg.Type,
		arg.Background,
		arg.Emoji,
		arg.IsDeleted,
	)
}

const removeUserFromCommunicationConversation = `-- name: RemoveUserFromCommunicationConversation :execresult
UPDATE pre_go_communication_conversation_99999
SET user_ids = JSON_REMOVE(
        user_ids,
        JSON_UNQUOTE(JSON_SEARCH(user_ids, 'one', ?))
    )
WHERE id = ?
`

type RemoveUserFromCommunicationConversationParams struct {
	JSONSEARCH string
	ID         int64
}

func (q *Queries) RemoveUserFromCommunicationConversation(ctx context.Context, arg RemoveUserFromCommunicationConversationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, removeUserFromCommunicationConversation, arg.JSONSEARCH, arg.ID)
}

const updateCommunicationConversation = `-- name: UpdateCommunicationConversation :execresult
UPDATE pre_go_communication_conversation_99999
SET title = ?,
    user_ids = JSON_ARRAY_APPEND(user_ids, '$', ?),
    description = ?,
    type = ?,
    background = ?,
    emoji = ?,
    is_deleted = ?,
    updated_at = NOW()
WHERE id = ?
`

type UpdateCommunicationConversationParams struct {
	Title           sql.NullString
	JSONARRAYAPPEND interface{}
	Description     sql.NullString
	Type            sql.NullString
	Background      sql.NullString
	Emoji           sql.NullString
	IsDeleted       sql.NullBool
	ID              int64
}

func (q *Queries) UpdateCommunicationConversation(ctx context.Context, arg UpdateCommunicationConversationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCommunicationConversation,
		arg.Title,
		arg.JSONARRAYAPPEND,
		arg.Description,
		arg.Type,
		arg.Background,
		arg.Emoji,
		arg.IsDeleted,
		arg.ID,
	)
}
