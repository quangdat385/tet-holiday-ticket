// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 00004_pre_go_communication_notification_99999.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"
)

const deleteNotificationById = `-- name: DeleteNotificationById :execresult
DELETE FROM pre_go_communication_notification_99999
WHERE id = ?
`

func (q *Queries) DeleteNotificationById(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteNotificationById, id)
}

const getNotificationById = `-- name: GetNotificationById :one
SELECT id, ` + "`" + `from` + "`" + `, ` + "`" + `to` + "`" + `, content, created_at, updated_at
FROM pre_go_communication_notification_99999
WHERE id = ?
`

func (q *Queries) GetNotificationById(ctx context.Context, id int64) (PreGoCommunicationNotification99999, error) {
	row := q.db.QueryRowContext(ctx, getNotificationById, id)
	var i PreGoCommunicationNotification99999
	err := row.Scan(
		&i.ID,
		&i.From,
		&i.To,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNotificationWhenToIsNull = `-- name: GetNotificationWhenToIsNull :many
SELECT id, ` + "`" + `from` + "`" + `, ` + "`" + `to` + "`" + `, content, created_at, updated_at
FROM pre_go_communication_notification_99999
WHERE ` + "`" + `to` + "`" + ` IS NULL
LIMIT ? OFFSET ?
`

type GetNotificationWhenToIsNullParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetNotificationWhenToIsNull(ctx context.Context, arg GetNotificationWhenToIsNullParams) ([]PreGoCommunicationNotification99999, error) {
	rows, err := q.db.QueryContext(ctx, getNotificationWhenToIsNull, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PreGoCommunicationNotification99999
	for rows.Next() {
		var i PreGoCommunicationNotification99999
		if err := rows.Scan(
			&i.ID,
			&i.From,
			&i.To,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotificationsByUserIDFrom = `-- name: GetNotificationsByUserIDFrom :one
SELECT id, ` + "`" + `from` + "`" + `, ` + "`" + `to` + "`" + `, content, created_at, updated_at
FROM pre_go_communication_notification_99999
WHERE ` + "`" + `from` + "`" + ` = ?
`

func (q *Queries) GetNotificationsByUserIDFrom(ctx context.Context, from int64) (PreGoCommunicationNotification99999, error) {
	row := q.db.QueryRowContext(ctx, getNotificationsByUserIDFrom, from)
	var i PreGoCommunicationNotification99999
	err := row.Scan(
		&i.ID,
		&i.From,
		&i.To,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNotificationsByUserIDTo = `-- name: GetNotificationsByUserIDTo :many
SELECT id, ` + "`" + `from` + "`" + `, ` + "`" + `to` + "`" + `, content, created_at, updated_at
FROM pre_go_communication_notification_99999
WHERE JSON_CONTAINS(` + "`" + `to` + "`" + `, JSON_QUOTE(?), '$')
LIMIT ? OFFSET ?
`

type GetNotificationsByUserIDToParams struct {
	JSONQUOTE string
	Limit     int32
	Offset    int32
}

func (q *Queries) GetNotificationsByUserIDTo(ctx context.Context, arg GetNotificationsByUserIDToParams) ([]PreGoCommunicationNotification99999, error) {
	rows, err := q.db.QueryContext(ctx, getNotificationsByUserIDTo, arg.JSONQUOTE, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PreGoCommunicationNotification99999
	for rows.Next() {
		var i PreGoCommunicationNotification99999
		if err := rows.Scan(
			&i.ID,
			&i.From,
			&i.To,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertNotification = `-- name: InsertNotification :execresult
INSERT INTO pre_go_communication_notification_99999 (
        ` + "`" + `from` + "`" + `,
        ` + "`" + `to` + "`" + `,
        content,
        created_at,
        updated_at
    )
VALUES (?, ?, ?, NOW(), NOW())
`

type InsertNotificationParams struct {
	From    int64
	To      json.RawMessage
	Content json.RawMessage
}

func (q *Queries) InsertNotification(ctx context.Context, arg InsertNotificationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertNotification, arg.From, arg.To, arg.Content)
}
