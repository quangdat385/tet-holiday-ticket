// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 00001_pre_go_communication_info_99999.sql

package database

import (
	"context"
	"database/sql"
)

const deleteCommunicationInfo = `-- name: DeleteCommunicationInfo :execresult
DELETE FROM pre_go_communication_info_99999
WHERE id = ?
`

func (q *Queries) DeleteCommunicationInfo(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteCommunicationInfo, id)
}

const getCommunicationInfoByID = `-- name: GetCommunicationInfoByID :one
SELECT id,
    user_id,
    status,
    value,
    type,
    created_at,
    updated_at
FROM pre_go_communication_info_99999
WHERE id = ?
`

func (q *Queries) GetCommunicationInfoByID(ctx context.Context, id int64) (PreGoCommunicationInfo99999, error) {
	row := q.db.QueryRowContext(ctx, getCommunicationInfoByID, id)
	var i PreGoCommunicationInfo99999
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.Value,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCommunicationInfoByUserID = `-- name: GetCommunicationInfoByUserID :one
SELECT id,
    user_id,
    status,
    value,
    type,
    created_at,
    updated_at
FROM pre_go_communication_info_99999
WHERE id = ?
`

func (q *Queries) GetCommunicationInfoByUserID(ctx context.Context, id int64) (PreGoCommunicationInfo99999, error) {
	row := q.db.QueryRowContext(ctx, getCommunicationInfoByUserID, id)
	var i PreGoCommunicationInfo99999
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.Value,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertCommunicationInfo = `-- name: InsertCommunicationInfo :execresult
INSERT INTO pre_go_communication_info_99999 (
        user_id,
        status,
        value,
        type,
        created_at,
        updated_at
    )
VALUES (?, ?, ?, ?, NOW(), NOW())
`

type InsertCommunicationInfoParams struct {
	UserID int64
	Status sql.NullBool
	Value  string
	Type   sql.NullString
}

func (q *Queries) InsertCommunicationInfo(ctx context.Context, arg InsertCommunicationInfoParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertCommunicationInfo,
		arg.UserID,
		arg.Status,
		arg.Value,
		arg.Type,
	)
}

const updateCommunicationInfo = `-- name: UpdateCommunicationInfo :execresult
UPDATE pre_go_communication_info_99999
SET status = ?,
    value = ?,
    type = ?,
    updated_at = NOW()
WHERE id = ?
`

type UpdateCommunicationInfoParams struct {
	Status sql.NullBool
	Value  string
	Type   sql.NullString
	ID     int64
}

func (q *Queries) UpdateCommunicationInfo(ctx context.Context, arg UpdateCommunicationInfoParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCommunicationInfo,
		arg.Status,
		arg.Value,
		arg.Type,
		arg.ID,
	)
}

const updateCommunicationInfoByUserId = `-- name: UpdateCommunicationInfoByUserId :execresult
UPDATE pre_go_communication_info_99999
SET status = ?,
    value = ?,
    type = ?,
    updated_at = NOW()
WHERE user_id = ?
`

type UpdateCommunicationInfoByUserIdParams struct {
	Status sql.NullBool
	Value  string
	Type   sql.NullString
	UserID int64
}

func (q *Queries) UpdateCommunicationInfoByUserId(ctx context.Context, arg UpdateCommunicationInfoByUserIdParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCommunicationInfoByUserId,
		arg.Status,
		arg.Value,
		arg.Type,
		arg.UserID,
	)
}
