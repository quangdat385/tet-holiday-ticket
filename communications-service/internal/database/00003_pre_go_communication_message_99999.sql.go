// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 00003_pre_go_communication_message_99999.sql

package database

import (
	"context"
	"database/sql"
)

const deleteCommunicationMessage = `-- name: DeleteCommunicationMessage :execresult
DELETE FROM pre_go_communication_message_99999
WHERE id = ?
`

func (q *Queries) DeleteCommunicationMessage(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteCommunicationMessage, id)
}

const getCommunicationMessageById = `-- name: GetCommunicationMessageById :one
SELECT id, conversation_id, user_id, status, message, type, created_at, updated_at
FROM pre_go_communication_message_99999
WHERE id = ?
`

func (q *Queries) GetCommunicationMessageById(ctx context.Context, id int64) (PreGoCommunicationMessage99999, error) {
	row := q.db.QueryRowContext(ctx, getCommunicationMessageById, id)
	var i PreGoCommunicationMessage99999
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.UserID,
		&i.Status,
		&i.Message,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCommunicationMessagesByConversationId = `-- name: GetCommunicationMessagesByConversationId :many
SELECT id, conversation_id, user_id, status, message, type, created_at, updated_at
FROM pre_go_communication_message_99999
WHERE conversation_id = ?
LIMIT ? OFFSET ?
`

type GetCommunicationMessagesByConversationIdParams struct {
	ConversationID int64
	Limit          int32
	Offset         int32
}

func (q *Queries) GetCommunicationMessagesByConversationId(ctx context.Context, arg GetCommunicationMessagesByConversationIdParams) ([]PreGoCommunicationMessage99999, error) {
	rows, err := q.db.QueryContext(ctx, getCommunicationMessagesByConversationId, arg.ConversationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PreGoCommunicationMessage99999
	for rows.Next() {
		var i PreGoCommunicationMessage99999
		if err := rows.Scan(
			&i.ID,
			&i.ConversationID,
			&i.UserID,
			&i.Status,
			&i.Message,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommunicationMessagesByListOfConversationIds = `-- name: GetCommunicationMessagesByListOfConversationIds :many
SELECT m.id, m.conversation_id, m.user_id, m.status, m.message, m.type, m.created_at, m.updated_at,
    MAX(m.created_at) AS last_message_time
FROM pre_go_communication_conversation_99999 c
    LEFT JOIN pre_go_communication_message_99999 m ON c.id = m.conversation_id
WHERE c.id = ?
ORDER BY last_message_time DESC
LIMIT ? OFFSET ?
`

type GetCommunicationMessagesByListOfConversationIdsParams struct {
	ID     int64
	Limit  int32
	Offset int32
}

type GetCommunicationMessagesByListOfConversationIdsRow struct {
	ID              sql.NullInt64
	ConversationID  sql.NullInt64
	UserID          sql.NullInt64
	Status          sql.NullBool
	Message         sql.NullString
	Type            sql.NullString
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
	LastMessageTime interface{}
}

func (q *Queries) GetCommunicationMessagesByListOfConversationIds(ctx context.Context, arg GetCommunicationMessagesByListOfConversationIdsParams) ([]GetCommunicationMessagesByListOfConversationIdsRow, error) {
	rows, err := q.db.QueryContext(ctx, getCommunicationMessagesByListOfConversationIds, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommunicationMessagesByListOfConversationIdsRow
	for rows.Next() {
		var i GetCommunicationMessagesByListOfConversationIdsRow
		if err := rows.Scan(
			&i.ID,
			&i.ConversationID,
			&i.UserID,
			&i.Status,
			&i.Message,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastMessageTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommunicationMessagesByUserId = `-- name: GetCommunicationMessagesByUserId :many
SELECT id, conversation_id, user_id, status, message, type, created_at, updated_at
FROM pre_go_communication_message_99999
WHERE user_id = ?
LIMIT ? OFFSET ?
`

type GetCommunicationMessagesByUserIdParams struct {
	UserID int64
	Limit  int32
	Offset int32
}

func (q *Queries) GetCommunicationMessagesByUserId(ctx context.Context, arg GetCommunicationMessagesByUserIdParams) ([]PreGoCommunicationMessage99999, error) {
	rows, err := q.db.QueryContext(ctx, getCommunicationMessagesByUserId, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PreGoCommunicationMessage99999
	for rows.Next() {
		var i PreGoCommunicationMessage99999
		if err := rows.Scan(
			&i.ID,
			&i.ConversationID,
			&i.UserID,
			&i.Status,
			&i.Message,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCommunicationMessage = `-- name: InsertCommunicationMessage :execresult
INSERT INTO pre_go_communication_message_99999 (
        conversation_id,
        user_id,
        status,
        message,
        type,
        created_at,
        updated_at
    )
VALUES (?, ?, ?, ?, ?, NOW(), NOW())
`

type InsertCommunicationMessageParams struct {
	ConversationID int64
	UserID         int64
	Status         sql.NullBool
	Message        string
	Type           string
}

func (q *Queries) InsertCommunicationMessage(ctx context.Context, arg InsertCommunicationMessageParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertCommunicationMessage,
		arg.ConversationID,
		arg.UserID,
		arg.Status,
		arg.Message,
		arg.Type,
	)
}

const updateCommunicationMessage = `-- name: UpdateCommunicationMessage :execresult
INSERT INTO pre_go_communication_message_read_99999 (message_id, user_id, read_at)
VALUES (?, ?, NOW())
`

type UpdateCommunicationMessageParams struct {
	MessageID sql.NullInt64
	UserID    sql.NullInt64
}

func (q *Queries) UpdateCommunicationMessage(ctx context.Context, arg UpdateCommunicationMessageParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCommunicationMessage, arg.MessageID, arg.UserID)
}
