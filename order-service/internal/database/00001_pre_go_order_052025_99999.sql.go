// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 00001_pre_go_order_052025_99999.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const deleteOrder = `-- name: DeleteOrder :execresult
DELETE FROM pre_go_order_052025_99999
WHERE id = ?
`

func (q *Queries) DeleteOrder(ctx context.Context, id int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteOrder, id)
}

const getOrderById = `-- name: GetOrderById :one
SELECT id,
    order_number,
    order_amount,
    terminal_id,
    order_date,
    order_notes,
    created_at,
    updated_at
FROM pre_go_order_052025_99999
WHERE id = ?
`

type GetOrderByIdRow struct {
	ID          int32
	OrderNumber string
	OrderAmount string
	TerminalID  int64
	OrderDate   time.Time
	OrderNotes  sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) GetOrderById(ctx context.Context, id int32) (GetOrderByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getOrderById, id)
	var i GetOrderByIdRow
	err := row.Scan(
		&i.ID,
		&i.OrderNumber,
		&i.OrderAmount,
		&i.TerminalID,
		&i.OrderDate,
		&i.OrderNotes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertOrder = `-- name: InsertOrder :execresult
INSERT INTO pre_go_order_052025_99999 (
        order_number,
        order_amount,
        terminal_id,
        order_date,
        order_notes,
        created_at,
        updated_at
    )
VALUES (?, ?, ?, ?, ?, NOW(), NOW())
`

type InsertOrderParams struct {
	OrderNumber string
	OrderAmount string
	TerminalID  int64
	OrderDate   time.Time
	OrderNotes  sql.NullString
}

func (q *Queries) InsertOrder(ctx context.Context, arg InsertOrderParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertOrder,
		arg.OrderNumber,
		arg.OrderAmount,
		arg.TerminalID,
		arg.OrderDate,
		arg.OrderNotes,
	)
}

const updateOrder = `-- name: UpdateOrder :execresult
UPDATE pre_go_order_052025_99999
SET order_amount = ?,
    terminal_id = ?,
    order_date = ?,
    order_notes = ?,
    updated_at = NOW()
WHERE id = ?
`

type UpdateOrderParams struct {
	OrderAmount string
	TerminalID  int64
	OrderDate   time.Time
	OrderNotes  sql.NullString
	ID          int32
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateOrder,
		arg.OrderAmount,
		arg.TerminalID,
		arg.OrderDate,
		arg.OrderNotes,
		arg.ID,
	)
}
