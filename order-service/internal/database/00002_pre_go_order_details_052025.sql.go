// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 00002_pre_go_order_details_052025.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const deleteOrderDetail = `-- name: DeleteOrderDetail :execresult
DELETE FROM pre_go_ticket_order_detail_052025_99999
WHERE id = ?
`

func (q *Queries) DeleteOrderDetail(ctx context.Context, id int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteOrderDetail, id)
}

const getOrderDetailById = `-- name: GetOrderDetailById :one
SELECT id,
    ticket_item_id,
    order_number,
    passenger_name,
    departure_station,
    arrival_station,
    departure_time,
    passenger_id,
    seat_class,
    ticket_price,
    seat_number,
    created_at,
    updated_at
FROM pre_go_ticket_order_detail_052025_99999
WHERE id = ?
`

type GetOrderDetailByIdRow struct {
	ID               int32
	TicketItemID     int64
	OrderNumber      string
	PassengerName    string
	DepartureStation string
	ArrivalStation   string
	DepartureTime    time.Time
	PassengerID      int64
	SeatClass        PreGoTicketOrderDetail05202599999SeatClass
	TicketPrice      string
	SeatNumber       string
	CreatedAt        time.Time
	UpdatedAt        time.Time
}

func (q *Queries) GetOrderDetailById(ctx context.Context, id int32) (GetOrderDetailByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getOrderDetailById, id)
	var i GetOrderDetailByIdRow
	err := row.Scan(
		&i.ID,
		&i.TicketItemID,
		&i.OrderNumber,
		&i.PassengerName,
		&i.DepartureStation,
		&i.ArrivalStation,
		&i.DepartureTime,
		&i.PassengerID,
		&i.SeatClass,
		&i.TicketPrice,
		&i.SeatNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderDetailsByOrderNumber = `-- name: GetOrderDetailsByOrderNumber :many
SELECT id,
    ticket_item_id,
    order_number,
    passenger_name,
    departure_station,
    arrival_station,
    departure_time,
    passenger_id,
    seat_class,
    ticket_price,
    seat_number,
    created_at,
    updated_at
FROM pre_go_ticket_order_detail_052025_99999
WHERE order_number = ?
`

type GetOrderDetailsByOrderNumberRow struct {
	ID               int32
	TicketItemID     int64
	OrderNumber      string
	PassengerName    string
	DepartureStation string
	ArrivalStation   string
	DepartureTime    time.Time
	PassengerID      int64
	SeatClass        PreGoTicketOrderDetail05202599999SeatClass
	TicketPrice      string
	SeatNumber       string
	CreatedAt        time.Time
	UpdatedAt        time.Time
}

func (q *Queries) GetOrderDetailsByOrderNumber(ctx context.Context, orderNumber string) ([]GetOrderDetailsByOrderNumberRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrderDetailsByOrderNumber, orderNumber)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderDetailsByOrderNumberRow
	for rows.Next() {
		var i GetOrderDetailsByOrderNumberRow
		if err := rows.Scan(
			&i.ID,
			&i.TicketItemID,
			&i.OrderNumber,
			&i.PassengerName,
			&i.DepartureStation,
			&i.ArrivalStation,
			&i.DepartureTime,
			&i.PassengerID,
			&i.SeatClass,
			&i.TicketPrice,
			&i.SeatNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderDetailsByPassengerId = `-- name: GetOrderDetailsByPassengerId :many
SELECT id,
    ticket_item_id,
    order_number,
    passenger_name,
    departure_station,
    arrival_station,
    departure_time,
    passenger_id,
    seat_class,
    ticket_price,
    seat_number,
    created_at,
    updated_at
FROM pre_go_ticket_order_detail_052025_99999
WHERE passenger_id = ?
`

type GetOrderDetailsByPassengerIdRow struct {
	ID               int32
	TicketItemID     int64
	OrderNumber      string
	PassengerName    string
	DepartureStation string
	ArrivalStation   string
	DepartureTime    time.Time
	PassengerID      int64
	SeatClass        PreGoTicketOrderDetail05202599999SeatClass
	TicketPrice      string
	SeatNumber       string
	CreatedAt        time.Time
	UpdatedAt        time.Time
}

func (q *Queries) GetOrderDetailsByPassengerId(ctx context.Context, passengerID int64) ([]GetOrderDetailsByPassengerIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrderDetailsByPassengerId, passengerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderDetailsByPassengerIdRow
	for rows.Next() {
		var i GetOrderDetailsByPassengerIdRow
		if err := rows.Scan(
			&i.ID,
			&i.TicketItemID,
			&i.OrderNumber,
			&i.PassengerName,
			&i.DepartureStation,
			&i.ArrivalStation,
			&i.DepartureTime,
			&i.PassengerID,
			&i.SeatClass,
			&i.TicketPrice,
			&i.SeatNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertOrderDetail = `-- name: InsertOrderDetail :execresult
INSERT INTO pre_go_ticket_order_detail_052025_99999 (
        ticket_item_id,
        order_number,
        passenger_name,
        departure_station,
        arrival_station,
        departure_time,
        passenger_id,
        seat_class,
        ticket_price,
        seat_number,
        created_at,
        updated_at
    )
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
`

type InsertOrderDetailParams struct {
	TicketItemID     int64
	OrderNumber      string
	PassengerName    string
	DepartureStation string
	ArrivalStation   string
	DepartureTime    time.Time
	PassengerID      int64
	SeatClass        PreGoTicketOrderDetail05202599999SeatClass
	TicketPrice      string
	SeatNumber       string
}

func (q *Queries) InsertOrderDetail(ctx context.Context, arg InsertOrderDetailParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertOrderDetail,
		arg.TicketItemID,
		arg.OrderNumber,
		arg.PassengerName,
		arg.DepartureStation,
		arg.ArrivalStation,
		arg.DepartureTime,
		arg.PassengerID,
		arg.SeatClass,
		arg.TicketPrice,
		arg.SeatNumber,
	)
}

const updateOrderDetail = `-- name: UpdateOrderDetail :execresult
UPDATE pre_go_ticket_order_detail_052025_99999
SET ticket_item_id = ?,
    order_number = ?,
    passenger_name = ?,
    departure_station = ?,
    arrival_station = ?,
    departure_time = ?,
    passenger_id = ?,
    seat_class = ?,
    ticket_price = ?,
    seat_number = ?,
    updated_at = NOW()
WHERE id = ?
`

type UpdateOrderDetailParams struct {
	TicketItemID     int64
	OrderNumber      string
	PassengerName    string
	DepartureStation string
	ArrivalStation   string
	DepartureTime    time.Time
	PassengerID      int64
	SeatClass        PreGoTicketOrderDetail05202599999SeatClass
	TicketPrice      string
	SeatNumber       string
	ID               int32
}

func (q *Queries) UpdateOrderDetail(ctx context.Context, arg UpdateOrderDetailParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateOrderDetail,
		arg.TicketItemID,
		arg.OrderNumber,
		arg.PassengerName,
		arg.DepartureStation,
		arg.ArrivalStation,
		arg.DepartureTime,
		arg.PassengerID,
		arg.SeatClass,
		arg.TicketPrice,
		arg.SeatNumber,
		arg.ID,
	)
}
