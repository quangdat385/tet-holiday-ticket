// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 00003_pre_go_station_99999.sql

package database

import (
	"context"
	"database/sql"
)

const deleteStation = `-- name: DeleteStation :execresult
DELETE FROM pre_go_station_99999
WHERE id = ?
`

func (q *Queries) DeleteStation(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteStation, id)
}

const getStationByCode = `-- name: GetStationByCode :one
SELECT id,
    name,
    code,
    status
FROM pre_go_station_99999
WHERE code = ?
`

type GetStationByCodeRow struct {
	ID     int64
	Name   string
	Code   string
	Status int32
}

func (q *Queries) GetStationByCode(ctx context.Context, code string) (GetStationByCodeRow, error) {
	row := q.db.QueryRowContext(ctx, getStationByCode, code)
	var i GetStationByCodeRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.Status,
	)
	return i, err
}

const getStationById = `-- name: GetStationById :one
SELECT id,
    name,
    code,
    status
FROM pre_go_station_99999
WHERE id = ?
`

type GetStationByIdRow struct {
	ID     int64
	Name   string
	Code   string
	Status int32
}

func (q *Queries) GetStationById(ctx context.Context, id int64) (GetStationByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getStationById, id)
	var i GetStationByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.Status,
	)
	return i, err
}

const getStationList = `-- name: GetStationList :many
SELECT id,
    name,
    code,
    status
FROM pre_go_station_99999
WHERE status = ?
LIMIT ? OFFSET ?
`

type GetStationListParams struct {
	Status int32
	Limit  int32
	Offset int32
}

type GetStationListRow struct {
	ID     int64
	Name   string
	Code   string
	Status int32
}

func (q *Queries) GetStationList(ctx context.Context, arg GetStationListParams) ([]GetStationListRow, error) {
	rows, err := q.db.QueryContext(ctx, getStationList, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStationListRow
	for rows.Next() {
		var i GetStationListRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Code,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertStation = `-- name: InsertStation :execresult
INSERT INTO pre_go_station_99999 (
        name,
        code,
        updated_at,
        created_at
    )
VALUES (?, ?, NOW(), NOW())
`

type InsertStationParams struct {
	Name string
	Code string
}

func (q *Queries) InsertStation(ctx context.Context, arg InsertStationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertStation, arg.Name, arg.Code)
}

const updateStation = `-- name: UpdateStation :execresult
UPDATE pre_go_station_99999
SET name = ?,
    code = ?,
    status = ?,
    updated_at = NOW()
WHERE id = ?
`

type UpdateStationParams struct {
	Name   string
	Code   string
	Status int32
	ID     int64
}

func (q *Queries) UpdateStation(ctx context.Context, arg UpdateStationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateStation,
		arg.Name,
		arg.Code,
		arg.Status,
		arg.ID,
	)
}
