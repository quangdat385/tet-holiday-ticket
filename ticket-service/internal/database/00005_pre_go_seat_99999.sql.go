// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 00005_pre_go_seat_99999.sql

package database

import (
	"context"
	"database/sql"
)

const deleteSeat = `-- name: DeleteSeat :execresult
DELETE FROM pre_go_seat_99999
WHERE id = ?
`

func (q *Queries) DeleteSeat(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteSeat, id)
}

const getSeatById = `-- name: GetSeatById :one
SELECT id,
    train_id,
    seat_number,
    seat_class,
    status
FROM pre_go_seat_99999
WHERE id = ?
`

type GetSeatByIdRow struct {
	ID         int64
	TrainID    int64
	SeatNumber string
	SeatClass  PreGoSeat99999SeatClass
	Status     int32
}

func (q *Queries) GetSeatById(ctx context.Context, id int64) (GetSeatByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getSeatById, id)
	var i GetSeatByIdRow
	err := row.Scan(
		&i.ID,
		&i.TrainID,
		&i.SeatNumber,
		&i.SeatClass,
		&i.Status,
	)
	return i, err
}

const getSeatsByTrainId = `-- name: GetSeatsByTrainId :many
SELECT id,
    train_id,
    seat_number,
    seat_class,
    status
FROM pre_go_seat_99999
WHERE train_id = ?
LIMIT ? OFFSET ?
`

type GetSeatsByTrainIdParams struct {
	TrainID int64
	Limit   int32
	Offset  int32
}

type GetSeatsByTrainIdRow struct {
	ID         int64
	TrainID    int64
	SeatNumber string
	SeatClass  PreGoSeat99999SeatClass
	Status     int32
}

func (q *Queries) GetSeatsByTrainId(ctx context.Context, arg GetSeatsByTrainIdParams) ([]GetSeatsByTrainIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getSeatsByTrainId, arg.TrainID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSeatsByTrainIdRow
	for rows.Next() {
		var i GetSeatsByTrainIdRow
		if err := rows.Scan(
			&i.ID,
			&i.TrainID,
			&i.SeatNumber,
			&i.SeatClass,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertSeat = `-- name: InsertSeat :execresult
INSERT INTO pre_go_seat_99999 (
        train_id,
        seat_number,
        seat_class,
        status,
        updated_at,
        created_at
    )
VALUES (?, ?, ?, ?, NOW(), NOW())
`

type InsertSeatParams struct {
	TrainID    int64
	SeatNumber string
	SeatClass  PreGoSeat99999SeatClass
	Status     int32
}

func (q *Queries) InsertSeat(ctx context.Context, arg InsertSeatParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertSeat,
		arg.TrainID,
		arg.SeatNumber,
		arg.SeatClass,
		arg.Status,
	)
}

const updateSeat = `-- name: UpdateSeat :execresult
UPDATE pre_go_seat_99999
SET train_id = ?,
    seat_number = ?,
    seat_class = ?,
    status = ?,
    updated_at = NOW()
WHERE id = ?
`

type UpdateSeatParams struct {
	TrainID    int64
	SeatNumber string
	SeatClass  PreGoSeat99999SeatClass
	Status     int32
	ID         int64
}

func (q *Queries) UpdateSeat(ctx context.Context, arg UpdateSeatParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateSeat,
		arg.TrainID,
		arg.SeatNumber,
		arg.SeatClass,
		arg.Status,
		arg.ID,
	)
}
