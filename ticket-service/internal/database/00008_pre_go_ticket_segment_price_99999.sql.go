// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 00008_pre_go_ticket_segment_price_99999.sql

package database

import (
	"context"
	"database/sql"
)

const deleteTicketSegmentPrice = `-- name: DeleteTicketSegmentPrice :execresult
DELETE FROM pre_go_ticket_segment_price_99999
WHERE id = ?
`

func (q *Queries) DeleteTicketSegmentPrice(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteTicketSegmentPrice, id)
}

const getAllTicketSegmentPrices = `-- name: GetAllTicketSegmentPrices :many
SELECT id,
    ticket_item_id,
    route_segment_id,
    price
FROM pre_go_ticket_segment_price_99999
LIMIT ? OFFSET ?
`

type GetAllTicketSegmentPricesParams struct {
	Limit  int32
	Offset int32
}

type GetAllTicketSegmentPricesRow struct {
	ID             int64
	TicketItemID   int64
	RouteSegmentID int64
	Price          string
}

func (q *Queries) GetAllTicketSegmentPrices(ctx context.Context, arg GetAllTicketSegmentPricesParams) ([]GetAllTicketSegmentPricesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllTicketSegmentPrices, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTicketSegmentPricesRow
	for rows.Next() {
		var i GetAllTicketSegmentPricesRow
		if err := rows.Scan(
			&i.ID,
			&i.TicketItemID,
			&i.RouteSegmentID,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTicketSegmentPriceById = `-- name: GetTicketSegmentPriceById :one
SELECT id,
    ticket_item_id,
    route_segment_id,
    price
FROM pre_go_ticket_segment_price_99999
WHERE id = ?
`

type GetTicketSegmentPriceByIdRow struct {
	ID             int64
	TicketItemID   int64
	RouteSegmentID int64
	Price          string
}

func (q *Queries) GetTicketSegmentPriceById(ctx context.Context, id int64) (GetTicketSegmentPriceByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getTicketSegmentPriceById, id)
	var i GetTicketSegmentPriceByIdRow
	err := row.Scan(
		&i.ID,
		&i.TicketItemID,
		&i.RouteSegmentID,
		&i.Price,
	)
	return i, err
}

const getTicketSegmentPricesByRouteSegmentId = `-- name: GetTicketSegmentPricesByRouteSegmentId :one
SELECT id,
    ticket_item_id,
    route_segment_id,
    price
FROM pre_go_ticket_segment_price_99999
WHERE route_segment_id = ?
`

type GetTicketSegmentPricesByRouteSegmentIdRow struct {
	ID             int64
	TicketItemID   int64
	RouteSegmentID int64
	Price          string
}

func (q *Queries) GetTicketSegmentPricesByRouteSegmentId(ctx context.Context, routeSegmentID int64) (GetTicketSegmentPricesByRouteSegmentIdRow, error) {
	row := q.db.QueryRowContext(ctx, getTicketSegmentPricesByRouteSegmentId, routeSegmentID)
	var i GetTicketSegmentPricesByRouteSegmentIdRow
	err := row.Scan(
		&i.ID,
		&i.TicketItemID,
		&i.RouteSegmentID,
		&i.Price,
	)
	return i, err
}

const getTicketSegmentPricesFromSegmentIDToToSegmentID = `-- name: GetTicketSegmentPricesFromSegmentIDToToSegmentID :many
SELECT id,
    ticket_item_id,
    route_segment_id,
    price
FROM pre_go_ticket_segment_price_99999
WHERE route_segment_id >= ?
    AND route_segment_id <= ?
`

type GetTicketSegmentPricesFromSegmentIDToToSegmentIDParams struct {
	RouteSegmentID   int64
	RouteSegmentID_2 int64
}

type GetTicketSegmentPricesFromSegmentIDToToSegmentIDRow struct {
	ID             int64
	TicketItemID   int64
	RouteSegmentID int64
	Price          string
}

func (q *Queries) GetTicketSegmentPricesFromSegmentIDToToSegmentID(ctx context.Context, arg GetTicketSegmentPricesFromSegmentIDToToSegmentIDParams) ([]GetTicketSegmentPricesFromSegmentIDToToSegmentIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getTicketSegmentPricesFromSegmentIDToToSegmentID, arg.RouteSegmentID, arg.RouteSegmentID_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTicketSegmentPricesFromSegmentIDToToSegmentIDRow
	for rows.Next() {
		var i GetTicketSegmentPricesFromSegmentIDToToSegmentIDRow
		if err := rows.Scan(
			&i.ID,
			&i.TicketItemID,
			&i.RouteSegmentID,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTicketSegmentPrice = `-- name: InsertTicketSegmentPrice :execresult
INSERT INTO pre_go_ticket_segment_price_99999 (
        ticket_item_id,
        route_segment_id,
        price,
        updated_at,
        created_at
    )
VALUES (?, ?, ?, NOW(), NOW())
`

type InsertTicketSegmentPriceParams struct {
	TicketItemID   int64
	RouteSegmentID int64
	Price          string
}

func (q *Queries) InsertTicketSegmentPrice(ctx context.Context, arg InsertTicketSegmentPriceParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertTicketSegmentPrice, arg.TicketItemID, arg.RouteSegmentID, arg.Price)
}

const updateTicketSegmentPrice = `-- name: UpdateTicketSegmentPrice :execresult
UPDATE pre_go_ticket_segment_price_99999
SET ticket_item_id = ?,
    route_segment_id = ?,
    price = ?,
    updated_at = NOW()
WHERE id = ?
`

type UpdateTicketSegmentPriceParams struct {
	TicketItemID   int64
	RouteSegmentID int64
	Price          string
	ID             int64
}

func (q *Queries) UpdateTicketSegmentPrice(ctx context.Context, arg UpdateTicketSegmentPriceParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateTicketSegmentPrice,
		arg.TicketItemID,
		arg.RouteSegmentID,
		arg.Price,
		arg.ID,
	)
}
