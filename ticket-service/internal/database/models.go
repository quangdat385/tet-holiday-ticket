// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type PreGoSeat99999SeatClass string

const (
	PreGoSeat99999SeatClassECONOMY  PreGoSeat99999SeatClass = "ECONOMY"
	PreGoSeat99999SeatClassBUSINESS PreGoSeat99999SeatClass = "BUSINESS"
	PreGoSeat99999SeatClassFIRST    PreGoSeat99999SeatClass = "FIRST"
)

func (e *PreGoSeat99999SeatClass) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PreGoSeat99999SeatClass(s)
	case string:
		*e = PreGoSeat99999SeatClass(s)
	default:
		return fmt.Errorf("unsupported scan type for PreGoSeat99999SeatClass: %T", src)
	}
	return nil
}

type NullPreGoSeat99999SeatClass struct {
	PreGoSeat99999SeatClass PreGoSeat99999SeatClass
	Valid                   bool // Valid is true if PreGoSeat99999SeatClass is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPreGoSeat99999SeatClass) Scan(value interface{}) error {
	if value == nil {
		ns.PreGoSeat99999SeatClass, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PreGoSeat99999SeatClass.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPreGoSeat99999SeatClass) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PreGoSeat99999SeatClass), nil
}

type PreGoTicketItem99999SeatClass string

const (
	PreGoTicketItem99999SeatClassECONOMY  PreGoTicketItem99999SeatClass = "ECONOMY"
	PreGoTicketItem99999SeatClassBUSINESS PreGoTicketItem99999SeatClass = "BUSINESS"
	PreGoTicketItem99999SeatClassFIRST    PreGoTicketItem99999SeatClass = "FIRST"
)

func (e *PreGoTicketItem99999SeatClass) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PreGoTicketItem99999SeatClass(s)
	case string:
		*e = PreGoTicketItem99999SeatClass(s)
	default:
		return fmt.Errorf("unsupported scan type for PreGoTicketItem99999SeatClass: %T", src)
	}
	return nil
}

type NullPreGoTicketItem99999SeatClass struct {
	PreGoTicketItem99999SeatClass PreGoTicketItem99999SeatClass
	Valid                         bool // Valid is true if PreGoTicketItem99999SeatClass is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPreGoTicketItem99999SeatClass) Scan(value interface{}) error {
	if value == nil {
		ns.PreGoTicketItem99999SeatClass, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PreGoTicketItem99999SeatClass.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPreGoTicketItem99999SeatClass) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PreGoTicketItem99999SeatClass), nil
}

type PreGoTrain99999Direction string

const (
	PreGoTrain99999DirectionSOUTH PreGoTrain99999Direction = "SOUTH"
	PreGoTrain99999DirectionNORTH PreGoTrain99999Direction = "NORTH"
)

func (e *PreGoTrain99999Direction) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PreGoTrain99999Direction(s)
	case string:
		*e = PreGoTrain99999Direction(s)
	default:
		return fmt.Errorf("unsupported scan type for PreGoTrain99999Direction: %T", src)
	}
	return nil
}

type NullPreGoTrain99999Direction struct {
	PreGoTrain99999Direction PreGoTrain99999Direction
	Valid                    bool // Valid is true if PreGoTrain99999Direction is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPreGoTrain99999Direction) Scan(value interface{}) error {
	if value == nil {
		ns.PreGoTrain99999Direction, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PreGoTrain99999Direction.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPreGoTrain99999Direction) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PreGoTrain99999Direction), nil
}

type PreGoTrain99999TrainType string

const (
	PreGoTrain99999TrainTypeEXPRESS PreGoTrain99999TrainType = "EXPRESS"
	PreGoTrain99999TrainTypeLOCAL   PreGoTrain99999TrainType = "LOCAL"
)

func (e *PreGoTrain99999TrainType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PreGoTrain99999TrainType(s)
	case string:
		*e = PreGoTrain99999TrainType(s)
	default:
		return fmt.Errorf("unsupported scan type for PreGoTrain99999TrainType: %T", src)
	}
	return nil
}

type NullPreGoTrain99999TrainType struct {
	PreGoTrain99999TrainType PreGoTrain99999TrainType
	Valid                    bool // Valid is true if PreGoTrain99999TrainType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPreGoTrain99999TrainType) Scan(value interface{}) error {
	if value == nil {
		ns.PreGoTrain99999TrainType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PreGoTrain99999TrainType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPreGoTrain99999TrainType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PreGoTrain99999TrainType), nil
}

// Table for route segments
type PreGoRouteSegment99999 struct {
	// Primary key
	ID int64
	// ID of the associated train
	TrainID int64
	// ID of the departure station
	FromStationID int64
	// ID of the arrival station
	ToStationID int64
	// Order of the segment in the route
	SegmentOrder int32
	DistanceKm   int32
	CreatedAt    sql.NullTime
	UpdatedAt    sql.NullTime
}

// Table for seat details
type PreGoSeat99999 struct {
	// Primary key
	ID int64
	// Train ID
	TrainID int64
	// Seat number
	SeatNumber string
	SeatClass  PreGoSeat99999SeatClass
	// Seat status (e.g., available, booked)
	Status    int32
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

// Table for seat details
type PreGoSeatReservation99999 struct {
	// Primary key
	ID int64
	// Train ID
	TrainID int64
	// Seat ID
	SeatID int64
	// Order number
	OrderNumber string
	// Departure station ID
	FromStationID int64
	// Arrival station ID
	ToStationID int64
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

// Table for station details
type PreGoStation99999 struct {
	// Primary key
	ID int64
	// Station name
	Name string
	// Station code
	Code string
	// Station status (e.g., active/inactive)
	Status    int32
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

// ticket table
type PreGoTicket99999 struct {
	// Primary key
	ID int64
	// ticket name
	Name string
	// ticket description
	Description sql.NullString
	// ticket sale start time
	StartTime time.Time
	// ticket sale end time
	EndTime time.Time
	// ticket sale activity status
	Status int32
	// Last update time
	UpdatedAt time.Time
	// Creation time
	CreatedAt time.Time
}

// Table for ticket details
type PreGoTicketItem99999 struct {
	// Primary key
	ID int64
	// Ticket title
	Name string
	// ID of the associated ticket
	TicketID int64
	// ID of the associated train
	TrainID int64
	// Ticket description
	Description sql.NullString
	// Seat class (e.g., ECONOMY, BUSINESS, FIRST)
	SeatClass PreGoTicketItem99999SeatClass
	// Initial stock quantity (e.g., 1000 tickets)
	StockInitial int32
	// Current available stock (e.g., 900 tickets)
	StockAvailable int32
	// Indicates if stock is pre-warmed (0/1)
	IsStockPrepared bool
	// Departure time of the train
	DepartureTime time.Time
	// Original ticket price
	PriceOriginal string
	// Discounted price during flash sale
	PriceFlash string
	// Flash sale start time
	SaleStartTime time.Time
	// Flash sale end time
	SaleEndTime time.Time
	// Ticket status (e.g., active/inactive)
	Status int32
	// ID of associated activity
	ActivityID int64
	// Timestamp of the last update
	UpdatedAt time.Time
	// Creation timestamp
	CreatedAt time.Time
}

// Table for ticket segment prices
type PreGoTicketSegmentPrice99999 struct {
	// Primary key
	ID int64
	// ID of the associated ticket item
	TicketItemID int64
	// ID of the associated route segment
	RouteSegmentID int64
	// Price for this segment
	Price     string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

// Table for train details
type PreGoTrain99999 struct {
	// Primary key
	ID int64
	// Train number
	Code string
	// Train name
	Name string
	// Departure station ID
	DepartureStationID int64
	// Arrival station ID
	ArrivalStationID int64
	// Departure time
	DepartureTime time.Time
	// Arrival time
	ArrivalTime time.Time
	// Train status (e.g., on time, delayed)
	Status int32
	// Train direction (e.g., SOUTH, NORTH)
	Direction PreGoTrain99999Direction
	// Train type (e.g., EXPRESS, LOCAL)
	TrainType PreGoTrain99999TrainType
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}
