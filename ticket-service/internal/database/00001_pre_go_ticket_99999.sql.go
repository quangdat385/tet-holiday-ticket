// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 00001_pre_go_ticket_99999.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const deleteTicket = `-- name: DeleteTicket :execresult
DELETE FROM pre_go_ticket_99999
WHERE id = ?
`

func (q *Queries) DeleteTicket(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteTicket, id)
}

const getAllTickets = `-- name: GetAllTickets :many
SELECT id,
    name,
    description,
    start_time,
    end_time,
    status,
    updated_at,
    created_at
FROM pre_go_ticket_99999
WHERE status = ?
LIMIT ? OFFSET ?
`

type GetAllTicketsParams struct {
	Status int32
	Limit  int32
	Offset int32
}

func (q *Queries) GetAllTickets(ctx context.Context, arg GetAllTicketsParams) ([]PreGoTicket99999, error) {
	rows, err := q.db.QueryContext(ctx, getAllTickets, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PreGoTicket99999
	for rows.Next() {
		var i PreGoTicket99999
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.StartTime,
			&i.EndTime,
			&i.Status,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTicketById = `-- name: GetTicketById :one
SELECT id,
    name,
    description,
    start_time,
    end_time,
    status,
    updated_at,
    created_at
FROM pre_go_ticket_99999
WHERE id = ?
`

func (q *Queries) GetTicketById(ctx context.Context, id int64) (PreGoTicket99999, error) {
	row := q.db.QueryRowContext(ctx, getTicketById, id)
	var i PreGoTicket99999
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const insertTicket = `-- name: InsertTicket :execresult
INSERT INTO pre_go_ticket_99999 (
        id,
        name,
        description,
        start_time,
        end_time,
        status,
        updated_at,
        created_at
    )
VALUES (?, ?, ?, ?, ?, ?, NOW(), NOW())
`

type InsertTicketParams struct {
	ID          int64
	Name        string
	Description sql.NullString
	StartTime   time.Time
	EndTime     time.Time
	Status      int32
}

func (q *Queries) InsertTicket(ctx context.Context, arg InsertTicketParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertTicket,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.StartTime,
		arg.EndTime,
		arg.Status,
	)
}

const updateTicket = `-- name: UpdateTicket :exec
UPDATE pre_go_ticket_99999
SET name = ?,
    description = ?,
    start_time = ?,
    end_time = ?,
    status = ?,
    updated_at = NOW()
WHERE id = ?
`

type UpdateTicketParams struct {
	Name        string
	Description sql.NullString
	StartTime   time.Time
	EndTime     time.Time
	Status      int32
	ID          int64
}

func (q *Queries) UpdateTicket(ctx context.Context, arg UpdateTicketParams) error {
	_, err := q.db.ExecContext(ctx, updateTicket,
		arg.Name,
		arg.Description,
		arg.StartTime,
		arg.EndTime,
		arg.Status,
		arg.ID,
	)
	return err
}
