// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 00002_pre_go_ticket_item_99999.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const deleteTicketItem = `-- name: DeleteTicketItem :execresult
DELETE FROM pre_go_ticket_item_99999
WHERE id = ?
`

func (q *Queries) DeleteTicketItem(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteTicketItem, id)
}

const getTicketItemById = `-- name: GetTicketItemById :one
SELECT id,
    name,
    ticket_id,
    train_id,
    seat_class,
    description,
    departure_time,
    stock_initial,
    stock_available,
    is_stock_prepared,
    price_original,
    price_flash,
    sale_start_time,
    sale_end_time,
    status,
    activity_id,
    updated_at,
    created_at
FROM pre_go_ticket_item_99999
WHERE id = ?
`

type GetTicketItemByIdRow struct {
	ID              int64
	Name            string
	TicketID        int64
	TrainID         int64
	SeatClass       PreGoTicketItem99999SeatClass
	Description     sql.NullString
	DepartureTime   time.Time
	StockInitial    int32
	StockAvailable  int32
	IsStockPrepared bool
	PriceOriginal   string
	PriceFlash      string
	SaleStartTime   time.Time
	SaleEndTime     time.Time
	Status          int32
	ActivityID      int64
	UpdatedAt       time.Time
	CreatedAt       time.Time
}

func (q *Queries) GetTicketItemById(ctx context.Context, id int64) (GetTicketItemByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getTicketItemById, id)
	var i GetTicketItemByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TicketID,
		&i.TrainID,
		&i.SeatClass,
		&i.Description,
		&i.DepartureTime,
		&i.StockInitial,
		&i.StockAvailable,
		&i.IsStockPrepared,
		&i.PriceOriginal,
		&i.PriceFlash,
		&i.SaleStartTime,
		&i.SaleEndTime,
		&i.Status,
		&i.ActivityID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const insertTicketItem = `-- name: InsertTicketItem :execresult
INSERT INTO pre_go_ticket_item_99999 (
        name,
        description,
        ticket_id,
        train_id,
        seat_class,
        stock_initial,
        stock_available,
        departure_time,
        is_stock_prepared,
        price_original,
        price_flash,
        sale_start_time,
        sale_end_time,
        status,
        activity_id,
        updated_at,
        created_at
    )
VALUES (
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        NOW(),
        NOW()
    )
`

type InsertTicketItemParams struct {
	Name            string
	Description     sql.NullString
	TicketID        int64
	TrainID         int64
	SeatClass       PreGoTicketItem99999SeatClass
	StockInitial    int32
	StockAvailable  int32
	DepartureTime   time.Time
	IsStockPrepared bool
	PriceOriginal   string
	PriceFlash      string
	SaleStartTime   time.Time
	SaleEndTime     time.Time
	Status          int32
	ActivityID      int64
}

func (q *Queries) InsertTicketItem(ctx context.Context, arg InsertTicketItemParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertTicketItem,
		arg.Name,
		arg.Description,
		arg.TicketID,
		arg.TrainID,
		arg.SeatClass,
		arg.StockInitial,
		arg.StockAvailable,
		arg.DepartureTime,
		arg.IsStockPrepared,
		arg.PriceOriginal,
		arg.PriceFlash,
		arg.SaleStartTime,
		arg.SaleEndTime,
		arg.Status,
		arg.ActivityID,
	)
}

const updateTicketItem = `-- name: UpdateTicketItem :execresult
UPDATE pre_go_ticket_item_99999
SET name = ?,
    ticket_id = ?,
    train_id = ?,
    description = ?,
    departure_time = ?,
    seat_class = ?,
    stock_initial = ?,
    stock_available = ?,
    is_stock_prepared = ?,
    price_original = ?,
    price_flash = ?,
    sale_start_time = ?,
    sale_end_time = ?,
    status = ?,
    activity_id = ?,
    updated_at = NOW()
WHERE id = ?
`

type UpdateTicketItemParams struct {
	Name            string
	TicketID        int64
	TrainID         int64
	Description     sql.NullString
	DepartureTime   time.Time
	SeatClass       PreGoTicketItem99999SeatClass
	StockInitial    int32
	StockAvailable  int32
	IsStockPrepared bool
	PriceOriginal   string
	PriceFlash      string
	SaleStartTime   time.Time
	SaleEndTime     time.Time
	Status          int32
	ActivityID      int64
	ID              int64
}

func (q *Queries) UpdateTicketItem(ctx context.Context, arg UpdateTicketItemParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateTicketItem,
		arg.Name,
		arg.TicketID,
		arg.TrainID,
		arg.Description,
		arg.DepartureTime,
		arg.SeatClass,
		arg.StockInitial,
		arg.StockAvailable,
		arg.IsStockPrepared,
		arg.PriceOriginal,
		arg.PriceFlash,
		arg.SaleStartTime,
		arg.SaleEndTime,
		arg.Status,
		arg.ActivityID,
		arg.ID,
	)
}

const updateTicketItemStock = `-- name: UpdateTicketItemStock :execresult
UPDATE pre_go_ticket_item_99999
SET stock_available = stock_available - ?,
    updated_at = NOW()
WHERE id = ?
    AND stock_available = ?
`

type UpdateTicketItemStockParams struct {
	StockAvailable   int32
	ID               int64
	StockAvailable_2 int32
}

func (q *Queries) UpdateTicketItemStock(ctx context.Context, arg UpdateTicketItemStockParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateTicketItemStock, arg.StockAvailable, arg.ID, arg.StockAvailable_2)
}
