// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 00004_pre_go_train_99999.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const deleteTrain = `-- name: DeleteTrain :execresult
DELETE FROM pre_go_train_99999
WHERE id = ?
`

func (q *Queries) DeleteTrain(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteTrain, id)
}

const getAllTrain = `-- name: GetAllTrain :many
SELECT id,
    name,
    code,
    departure_station_id,
    arrival_station_id,
    departure_time,
    arrival_time,
    status,
    direction train_type
FROM pre_go_train_99999
WHERE status = ?
`

type GetAllTrainRow struct {
	ID                 int64
	Name               string
	Code               string
	DepartureStationID int64
	ArrivalStationID   int64
	DepartureTime      time.Time
	ArrivalTime        time.Time
	Status             int32
	TrainType          PreGoTrain99999Direction
}

func (q *Queries) GetAllTrain(ctx context.Context, status int32) ([]GetAllTrainRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllTrain, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTrainRow
	for rows.Next() {
		var i GetAllTrainRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Code,
			&i.DepartureStationID,
			&i.ArrivalStationID,
			&i.DepartureTime,
			&i.ArrivalTime,
			&i.Status,
			&i.TrainType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrainById = `-- name: GetTrainById :one
SELECT id,
    name,
    code,
    departure_station_id,
    arrival_station_id,
    departure_time,
    arrival_time,
    status,
    direction,
    train_type
FROM pre_go_train_99999
WHERE id = ?
`

type GetTrainByIdRow struct {
	ID                 int64
	Name               string
	Code               string
	DepartureStationID int64
	ArrivalStationID   int64
	DepartureTime      time.Time
	ArrivalTime        time.Time
	Status             int32
	Direction          PreGoTrain99999Direction
	TrainType          PreGoTrain99999TrainType
}

func (q *Queries) GetTrainById(ctx context.Context, id int64) (GetTrainByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getTrainById, id)
	var i GetTrainByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.DepartureStationID,
		&i.ArrivalStationID,
		&i.DepartureTime,
		&i.ArrivalTime,
		&i.Status,
		&i.Direction,
		&i.TrainType,
	)
	return i, err
}

const insertTrain = `-- name: InsertTrain :execresult
INSERT INTO pre_go_train_99999 (
        name,
        code,
        departure_station_id,
        arrival_station_id,
        departure_time,
        arrival_time,
        status,
        direction,
        train_type,
        created_at,
        updated_at
    )
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
`

type InsertTrainParams struct {
	Name               string
	Code               string
	DepartureStationID int64
	ArrivalStationID   int64
	DepartureTime      time.Time
	ArrivalTime        time.Time
	Status             int32
	Direction          PreGoTrain99999Direction
	TrainType          PreGoTrain99999TrainType
}

func (q *Queries) InsertTrain(ctx context.Context, arg InsertTrainParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertTrain,
		arg.Name,
		arg.Code,
		arg.DepartureStationID,
		arg.ArrivalStationID,
		arg.DepartureTime,
		arg.ArrivalTime,
		arg.Status,
		arg.Direction,
		arg.TrainType,
	)
}

const updateTrain = `-- name: UpdateTrain :execresult
UPDATE pre_go_train_99999
SET name = ?,
    code = ?,
    departure_station_id = ?,
    arrival_station_id = ?,
    departure_time = ?,
    arrival_time = ?,
    status = ?,
    direction = ?,
    train_type = ?,
    updated_at = NOW()
WHERE id = ?
`

type UpdateTrainParams struct {
	Name               string
	Code               string
	DepartureStationID int64
	ArrivalStationID   int64
	DepartureTime      time.Time
	ArrivalTime        time.Time
	Status             int32
	Direction          PreGoTrain99999Direction
	TrainType          PreGoTrain99999TrainType
	ID                 int64
}

func (q *Queries) UpdateTrain(ctx context.Context, arg UpdateTrainParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateTrain,
		arg.Name,
		arg.Code,
		arg.DepartureStationID,
		arg.ArrivalStationID,
		arg.DepartureTime,
		arg.ArrivalTime,
		arg.Status,
		arg.Direction,
		arg.TrainType,
		arg.ID,
	)
}

const updateTrainStatus = `-- name: UpdateTrainStatus :execresult
UPDATE pre_go_train_99999
SET status = ?,
    updated_at = NOW()
WHERE id = ?
`

type UpdateTrainStatusParams struct {
	Status int32
	ID     int64
}

func (q *Queries) UpdateTrainStatus(ctx context.Context, arg UpdateTrainStatusParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateTrainStatus, arg.Status, arg.ID)
}
