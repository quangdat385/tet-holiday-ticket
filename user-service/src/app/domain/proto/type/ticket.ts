// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: ticket.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "ticket";

export interface GetTicketRequest {
  id: number;
}

export interface GetTicketItemRequest {
  id: number;
}

export interface PreGoTicket99999 {
  id: number;
  name: string;
  description: string;
  startTime: Timestamp | undefined;
  endTime: Timestamp | undefined;
}

export interface PreGoTicketItem99999 {
  id: number;
  name: string;
  description: string;
  stockInitial: number;
  stockAvailable: number;
  isStockPrepared: boolean;
  priceOriginal: number;
  priceFlash: number;
  saleStartTime: Timestamp | undefined;
  saleEndTime: Timestamp | undefined;
  status: number;
  activityId: number;
}

export const TICKET_PACKAGE_NAME = "ticket";

export interface TicketServiceClient {
  getTicketItem(request: GetTicketItemRequest, metadata: Metadata, ...rest: any): Observable<PreGoTicketItem99999>;

  getTicket(request: GetTicketRequest, metadata: Metadata, ...rest: any): Observable<PreGoTicket99999>;
}

export interface TicketServiceController {
  getTicketItem(
    request: GetTicketItemRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<PreGoTicketItem99999> | Observable<PreGoTicketItem99999> | PreGoTicketItem99999;

  getTicket(
    request: GetTicketRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<PreGoTicket99999> | Observable<PreGoTicket99999> | PreGoTicket99999;
}

export function TicketServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getTicketItem", "getTicket"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TicketService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TicketService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TICKET_SERVICE_NAME = "TicketService";
