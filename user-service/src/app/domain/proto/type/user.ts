// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: user.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export interface UserById {
  userId: number;
}

export interface User {
  userId: number;
  userAccount: string;
  userSalt: string;
  userRoles: UserRoleType[];
}

export interface UserRoleType {
  roleId: number;
  roleName: string;
  roleDescription: string;
  roleMenus: MenuType[];
}

export interface MenuType {
  menuId: number;
  menuName: string;
  menuUrl: string;
  menuPrefix: string;
  menuPid: string;
}

export const USER_PACKAGE_NAME = "user";

export interface UserServiceGrpcClient {
  findOne(request: UserById, metadata: Metadata, ...rest: any): Observable<User>;
}

export interface UserServiceGrpcController {
  findOne(request: UserById, metadata: Metadata, ...rest: any): Promise<User> | Observable<User> | User;
}

export function UserServiceGrpcControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["findOne"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserServiceGrpc", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserServiceGrpc", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_GRPC_SERVICE_NAME = "UserServiceGrpc";
